//Exponentially weighted liquidity tracker
 

//
//
using System;
using System.Drawing;
using TradingPlatform.BusinessLayer;


namespace Order_Flow_Tools
{
    public class DOM_totals_lines : Indicator
    {
        [InputParameter("Level count", 10, 1, 9999, 1, 0)]
        public int InputLevelsCount = 10;

        [InputParameter("Custom tick size", 20, 0.0001, 9999, 0.0001, 4)]
        public double InputCustomTicksize = 0.0001;

        [InputParameter("Font size", 30, 1, 30, 1, 0)]
        public int fontSize = 8;

        [InputParameter("Paint rectangle", 40, 0, 1, 1, 0)]
        public bool paintRect = true;

        [InputParameter("X coordinate", 50, 1, 9999, 1, 0)]
        public int x = 775;

        [InputParameter("Y coordinate", 60, 1, 9999, 1, 0)]
        public int y = 20;

        // Add new input parameters for the weight and decay factor
        [InputParameter("Weight Factor", 10, 0.1, 2, 0.1, 2)]
        public double weightFactor = 1.0;

        [InputParameter("Half-Life", 30, 0.1, 10, 0.1, 2)]
        public double halfLife = 1.0;

        [InputParameter("Decay Factor", 20, 0.1, 2, 0.1, 2)]
        public double decayFactor = 1.0;

        [InputParameter("Compute in money units", 30, 0, 1, 1, 0)]
        public bool computeInMoneyUnits = false;

        [InputParameter("Average per price level", 40, 0, 1, 1, 0)]
        public bool averagePerPriceLevel = false;



        double _weightedAskVolume = 0.0;
        double _weightedBidVolume = 0.0;

         public DOM_totals_lines()
            : base()
        {
            Name = "DOM_totals_lines";
            Description = "Show the total Bid/Ask from DOM, needs level II data";

            AddLineSeries("Bids cumulative", Color.DarkRed, 2, LineStyle.Solid);
            AddLineSeries("Asks cumulative", Color.DarkGreen, 2, LineStyle.Solid);

            SeparateWindow = true;
        }

        protected override void OnInit()
        {
            this.Symbol.NewLevel2 += Symbol_NewLevel2Handler;

        }

        protected override void OnUpdate(UpdateArgs args)
        {
            if (args.Reason == UpdateReason.HistoricalBar)
                return;
            var dom = this.Symbol.DepthOfMarket.GetDepthOfMarketAggregatedCollections(new GetLevel2ItemsParameters()
            {
                AggregateMethod = AggregateMethod.ByPriceLVL,
                LevelsCount = this.InputLevelsCount,
                CalculateCumulative = true,
                CustomTickSize = this.InputCustomTicksize
            });

            double weightedBidVolume = 0.0;
            double weightedAskVolume = 0.0;
            double sumBidWeights = 0.0;
            double sumAskWeights = 0.0;
            double weight = Math.Exp(-i / halfLife);

            for (int i = 0; i < dom.Bids.Length; i++)
            {
                double weight = Math.Exp(-i / halfLife);
                weightedBidVolume += dom.Bids[i].Size * dom.Bids[i].Price * weight;
                sumBidWeights += weight;
            }

            for (int i = 0; i < dom.Asks.Length; i++)
            {
                double weight = Math.Exp(-i / halfLife);
                weightedAskVolume += dom.Asks[i].Size * dom.Asks[i].Price * weight;
                sumAskWeights += weight;
            // Normalize the result by the sum of weights if the computeInMoneyUnits input parameter is true
            if (computeInMoneyUnits)
            {
                weightedBidVolume /= sumBidWeights;
                 weightedAskVolume /= sumAskWeights;
            }

             // Divide by the length of the bids or asks if the averagePerPriceLevel input parameter is true
            if (averagePerPriceLevel)
             {
                weightedBidVolume /= dom.Bids.Length;
               weightedAskVolume /= dom.Asks.Length;
            }

            // Set the values to the LineSeries
            SetValue(weightedBidVolume, 0);
            SetValue(weightedAskVolume, 1);
}

    private void Symbol_NewLevel2Handler(Symbol symbol, Level2Quote level2, DOMQuote dom)
        {

        }
        protected override void OnClear()
        {
            this.Symbol.NewLevel2 -= Symbol_NewLevel2Handler;
        }

        public override void OnPaintChart(PaintChartEventArgs args)
        {
            if (paintRect)
            {
                Graphics gr = Graphics.FromHdc(args.Hdc);

                // Create a font
                Font font = new Font("Arial", fontSize);
                double normalizedBidVolume = _weightedBidVolume;
                double normalizedAskVolume = _weightedAskVolume;
                // Normalize the result by the sum of weights if the computeInMoneyUnits input parameter is true
                if (computeInMoneyUnits)
                {
                    normalizedBidVolume /= sumBidWeights;
                    normalizedAskVolume /= sumAskWeights;
                }
                // Divide by the length of the bids or asks if the averagePerPriceLevel input parameter is true
                if (averagePerPriceLevel)
                {
                    normalizedBidVolume /= dom.Bids.Length;
                    normalizedAskVolume /= dom.Asks.Length;
                }
                Color rectColor = Color.Teal;
                if (normalizedBidVolume > normalizedAskVolume)
                    rectColor = Color.Red;
                else if (normalizedBidVolume < normalizedAskVolume)
                    rectColor = Color.Green;
                else
                    rectColor = Color.Teal;
                Pen lpen = new Pen(rectColor, 3);

                Brush brushBids = Brushes.DarkRed;
                Brush brushAsks = Brushes.DarkGreen;
                gr.DrawRectangle(lpen, x, y, 60, 20);
                gr.DrawString(normalizedBidVolume.ToString(), font, brushBids, x + 5, y + 3);
                gr.DrawString(weightedBidVolume.ToString(), font, brushBids, x + 5, y + 3);
                gr.DrawString(weightedAskVolume.ToString(), font, brushAsks, x + 35, y + 3);

                if (computeInMoneyUnits)
                {
                    gr.DrawString(weightedBidVolume.ToString("C"), font, brushBids, x + 5, y + 3);
                    gr.DrawString(weightedAskVolume.ToString("C"), font, brushAsks, x + 35, y + 3);
                }
                else if (averagePerPriceLevel)
                {
                    gr.DrawString(weightedBidVolume.ToString("F2"), font, brushBids, x + 5, y + 3);
                    gr.DrawString(weightedAskVolume.ToString("F2"), font, brushAsks, x + 35, y + 3);
                }
                else
                {
                    gr.DrawString(weightedBidVolume.ToString("N0"), font, brushBids, x + 5, y + 3);
                    gr.DrawString(weightedAskVolume.ToString("N0"), font, brushAsks, x + 35, y + 3);
                }


            }

        }
    }
}
